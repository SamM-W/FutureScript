//Compiled by the compiler which compiled this file
import { range, log, validateIsOf } from "file://C:\\Gists\\EPQ-FutureProgrammingLanguages\\NewLang\\usage\\pjs-lib\\Implementations.js"; ; var x =  2 ; var y =  validateIsOf ( "Hello world!" , "string" ) ; var z =  validateIsOf ( 2 , "string" ) ; function hello ( name , exclamations ) { validateIsOf ( exclamations , "number" ) ; validateIsOf ( name , "string" ) ; log ( "Hello " + name + "!" . repeat ( exclamations ) ) ; } ; hello ( "John" , 1 ) ; hello ( 2 , 3 ) ; hello ( "Jane" ) ; for ( var i in range ( 5 ) )  log ( i ) ; ; log ( true && false || ! false ) ; log ( true && false || ! false ) ;  class User {  ; constructor ( name , age ) { validateIsOf ( age , "number" ) ; validateIsOf ( name , "string" ) ; this.getName = (name) => this.name;this.getAge = (age) => this.age; this.setName = (name) => {this.name = name};this.setAge = (age) => {this.age = age}; this.name = name;this.age = age; this._composure = {"base":{"canAccessStorefront":{"procedure":false},"logAllPermissions":{"procedure":true}}}; this._traits = []; this.getTrait = (traitType) => { for (var i = 0; i < this._traits.length; i++) { if (this._traits[i] instanceof traitType) { return this._traits[i]; } } return null; }; this.getTraits = (traitType) => { var all = []; for (var i = 0; i < this._traits.length; i++) { if (this._traits[i] instanceof traitType) { all.push(this._traits[i]); } } return all; }; this.addTrait = (trait) => { this._traits.push(trait); for (const functionName in this._composure.base) { if (trait[functionName]) { const isProcedure = this._composure.base[functionName].procedure; const traitFunction = trait[functionName]; const next = this[functionName]; this[functionName] = (...args) => { if (isProcedure) { next.apply(trait, [...args, this]); traitFunction.apply(trait, [...args, this]); } else { return traitFunction.apply(trait, [...args, this, next]); } } } } }; } ; canAccessStorefront ( storefrontId ) { validateIsOf ( storefrontId , "string" ) ; return false ; } ; logAllPermissions ( ) { log ( "Logging user permissions:" ) ; } ; } ; class Admin {  ; constructor ( ) {    } ; canAccessStorefront ( storefrontId ,comp, next ) { validateIsOf ( storefrontId , "string" ) ; return true ; } ; logAllPermissions ( comp ) { log ( "Hello from admin permissions." ) ; } ; } ; class StorefrontOwner {  ; constructor ( storefrontId ) { this.getStorefrontId = (storefrontId) => this.storefrontId; this.setStorefrontId = (storefrontId) => {this.storefrontId = storefrontId}; this.storefrontId = storefrontId; } ; canAccessStorefront ( storefrontId ,comp, next ) { return this . storefrontId == storefrontId || next (...[...arguments].slice(0,-2)) ; } ; logAllPermissions ( comp ) { log ( "Hello from storefont (" + this . storefrontId + ") permissions." ) ; } ; } ; var user =  validateIsOf ( new User ( "John" , 30 ) , User ) ; user . addTrait ( new StorefrontOwner ( "storefrontId1" ) ) ; log ( user . canAccessStorefront ( "storefrontId1" ) ) ; log ( user . canAccessStorefront ( "storefrontId2" ) ) ; var user2 =  new User ( "Jane" , 25 ) ; user2 . addTrait ( new StorefrontOwner ( "storefrontId2" ) ) ; user2 . addTrait ( new StorefrontOwner ( "storefrontId3" ) ) ; var userAdmin =  validateIsOf ( new User ( "Admin" , 40 ) , User ) ; userAdmin . addTrait ( new Admin ( ) ) ; log ( user2 . canAccessStorefront ( "storefrontId1" ) ) ; log ( user2 . canAccessStorefront ( "storefrontId2" ) ) ; log ( user2 . canAccessStorefront ( "storefrontId3" ) ) ; log ( userAdmin . canAccessStorefront ( "storefrontId1" ) ) ; log ( userAdmin . canAccessStorefront ( "storefrontId2" ) ) ; log ( user . getName ( ) ) ; user2 . logAllPermissions ( ) ;