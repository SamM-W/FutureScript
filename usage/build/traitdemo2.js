//Compiled by the FutureScript compiler (v2.1.6)
import { range, log, validateIsOf } from "file://C:\\Gists\\EPQ-FutureProgrammingLanguages\\NewLang\\library\\Implementations.js";
const PERMISSIONS =  { READ : 1 , WRITE : 2 , DELETE : 4 , EXECUTE : 8 , ADMIN : 16 , } ; class Administrator { constructor ( permissionsLevel ) { validateIsOf ( permissionsLevel , property ) ; } ; } ; class RootAdministrator { constructor ( ) { } ; onCompose ( composedClass ) { composedClass . addTrait ( new Administrator ( 0xFFFFF ) ) ; } ; } ;  class User { constructor ( name , age ) { validateIsOf ( age , "number" ) ; validateIsOf ( name , "string" ) ; this.getName = (name) => this.name;this.getAge = (age) => this.age; this.setName = (name) => {this.name = name};this.setAge = (age) => {this.age = age}; this.name = name;this.age = age; this._composure = {"base":{}}; this._traits = []; this.getTrait = (traitType) => { for (var i = 0; i < this._traits.length; i++) { if (this._traits[i] instanceof traitType) { return this._traits[i]; } } return null; }; this.getTraits = (traitType) => { var all = []; for (var i = 0; i < this._traits.length; i++) { if (this._traits[i] instanceof traitType) { all.push(this._traits[i]); } } return all; }; this.addTrait = (trait) => { this._traits.push(trait); for (const functionName in this._composure.base) { if (trait[functionName]) { const isProcedure = this._composure.base[functionName].procedure; const traitFunction = trait[functionName]; const next = this[functionName]; this[functionName] = (...args) => { if (isProcedure) { next.apply(trait, [...args, this]); traitFunction.apply(trait, [...args, this]); } else { return traitFunction.apply(trait, [...args, this, next]); } } } } trait.onCompose?.(this); }; } ; } ; var newUser =  validateIsOf ( new User ( "John Doe" , 25 ) , User ) ; newUser . addTrait ( new Administrator ( PERMISSIONS . READ | PERMISSIONS . WRITE ) ) ; var root =  validateIsOf ( new User ( "Root" , 30 ) , User ) ; root . addTrait ( new RootAdministrator ( ) ) ; console . log ( `Composition of: ${newUser.getName()}` ) ; console . log ( newUser . _traits ) ; console . log ( `Composition of: ${root.getName()}` ) ; console . log ( root . _traits ) ;