//Compiled by the FutureScript compiler (v2.1.5)
import { range, log, validateIsOf } from "file://C:\\Gists\\EPQ-FutureProgrammingLanguages\\NewLang\\library\\Implementations.js";
 class User {  ; constructor ( name , age ) { validateIsOf ( age , "number" ) ; validateIsOf ( name , "string" ) ; this.getName = (name) => this.name;this.getAge = (age) => this.age; this.setName = (name) => {this.name = name};this.setAge = (age) => {this.age = age}; this.name = name;this.age = age; this._composure = {"base":{"canAccessStorefront":{"procedure":false},"isOwnerOfStorefront":{"procedure":false}}}; this._traits = []; this.getTrait = (traitType) => { for (var i = 0; i < this._traits.length; i++) { if (this._traits[i] instanceof traitType) { return this._traits[i]; } } return null; }; this.getTraits = (traitType) => { var all = []; for (var i = 0; i < this._traits.length; i++) { if (this._traits[i] instanceof traitType) { all.push(this._traits[i]); } } return all; }; this.addTrait = (trait) => { this._traits.push(trait); for (const functionName in this._composure.base) { if (trait[functionName]) { const isProcedure = this._composure.base[functionName].procedure; const traitFunction = trait[functionName]; const next = this[functionName]; this[functionName] = (...args) => { if (isProcedure) { next.apply(trait, [...args, this]); traitFunction.apply(trait, [...args, this]); } else { return traitFunction.apply(trait, [...args, this, next]); } } } } trait.onCompose?.(this); }; } ; canAccessStorefront ( storefrontId ) { validateIsOf ( storefrontId , "string" ) ; return false ; } ; isOwnerOfStorefront ( storefrontId ) { validateIsOf ( storefrontId , "string" ) ; return false ; } ; } ; class Admin {  ; constructor ( ) {    } ; canAccessStorefront ( storefrontId ,comp, next ) { validateIsOf ( storefrontId , "string" ) ; return true ; } ; } ; class StorefrontOwner {  ; constructor ( storefrontId ) { this.getStorefrontId = (storefrontId) => this.storefrontId; this.setStorefrontId = (storefrontId) => {this.storefrontId = storefrontId}; this.storefrontId = storefrontId; } ; canAccessStorefront ( storefrontId ,comp, next ) { return this . storefrontId == storefrontId || next (...[...arguments].slice(0,-2)) ; } ; isOwnerOfStorefront ( storefrontId ,comp, next ) { return this . storefrontId == storefrontId || next (...[...arguments].slice(0,-2)) ; } ; } ; var user =  new User ( "John" , 30 ) ; user . addTrait ( new StorefrontOwner ( "storefrontId1" ) ) ; log ( user . canAccessStorefront ( "storefrontId1" ) ) ; log ( user . canAccessStorefront ( "storefrontId2" ) ) ; user . addTrait ( new Admin ( ) ) ; log ( user . canAccessStorefront ( "storefrontId1" ) ) ; log ( user . canAccessStorefront ( "storefrontId2" ) ) ; log ( user . isOwnerOfStorefront ( "storefrontId1" ) ) ; log ( user . isOwnerOfStorefront ( "storefrontId2" ) ) ;