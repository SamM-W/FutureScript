import fs from "fs";
import path from "path";

composed class CustomerData {
    constructor(
        property String firstName,
        property String lastName,
        property Number customerID,
        property String email
    ) {
    }
    
    getFieldsForSerialisation() {
        return {
            firstName: this.firstName, lastName: this.lastName, customerID: this.customerID, email: this.email
        }
    }
}

composed class TextFileOutput {
    constructor(property String targetFile) {}

    write() {
        var content = comp.getTextForFileOutput();
        fs.mkdirSync(path.dirname(this.targetFile), { recursive: true });
        fs.writeFileSync(this.targetFile, content);
    }

    expect getTextForFileOutput();
}

composed class CSVWriter {
    getTextForFileOutput() {
        var fields = comp.getFieldsForSerialisation();
        console.log(fields);
        var values = [];
        for (var key in fields) {
            values.push(fields[key]);
        }
        return values.join(",");
    }

    expect getFieldsForSerialisation();
}

composed class YMLWriter {
    getTextForFileOutput() {
        var fields = comp.getFieldsForSerialisation();
        var content = "";
        for (var key in fields) {
            content += `${key}: ${fields[key]}\n`
        }
        return content;
    }

    expect getFieldsForSerialisation();
}

function createCSVCustomer(String firstName, String lastName, Number customerID, String email) {
    return new Composed(
        new CustomerData(firstName, lastName, customerID, email),
        new TextFileOutput("./customer/" + customerID + ".csv"),
        new CSVWriter()
    )
}

function createYMLCustomer(String firstName, String lastName, Number customerID, String email) {
    return new Composed(
        new CustomerData(firstName, lastName, customerID, email),
        new TextFileOutput("./customer/" + customerID + ".yml"),
        new YMLWriter()
    )
}

Composed<Customer> customer1 = createCSVCustomer("Charlie", "Sirperator", 1, "customer1@example.com");
Composed<Customer> customer2 = createYMLCustomer("Alex", "Sirperator", 2, "customer1@example.com");

Array<Customer> customers = [customer1, customer2];

for (var customer of customers) {
    customer.write();
}
